{
  "name": "validate",
  "description": "Validate object properties in javascript.",
  "version": "3.0.1",
  "author": {
    "name": "Eivind Fjeldstad"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/eivindfjeldstad/validate.git"
  },
  "keywords": [
    "validation",
    "validate",
    "valid",
    "object"
  ],
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "eivindfjeldstad-dot": "0.0.1",
    "component-type": "1.0.0",
    "typecast": "0.0.1"
  },
  "devDependencies": {
    "should": "~2.1.0",
    "mocha": "~1.14.0"
  },
  "license": "MIT",
  "readme": "# validate\nValidate object properties in javascript.\n\n[![npm version](http://img.shields.io/npm/v/validate.svg?style=flat)](https://npmjs.org/package/validate)\n[![Build Status](http://img.shields.io/travis/eivindfjeldstad/validate.svg?style=flat)](https://travis-ci.org/eivindfjeldstad/validate)\n\n## Example\n```js\nvar schema = require('validate');\nvar user = schema({\n  name: {\n    type: 'string',\n    required: true,\n    message: 'Name is required.'\n  },\n  email: {\n    type: 'string',\n    required: true,\n    match: /+\\@.+\\..+/,\n    message: 'Email must be valid.'\n  },\n  address: {\n    street: {\n      type: 'string',\n      required: true,\n      message: 'Street is required.'\n    },\n    city: {\n      type: 'string',\n      required: true,\n      message: 'City is required.'\n    }\n  },\n});\n\nvar errors = user.validate(obj);\n```\n\nEach error has a `.path`, describing the full path of the property that failed validation,\nand a `.message` property.\n\n```js\nerrors[0].path //=> 'address.street'\nerrors[0].message //=> 'Street is required.'\n```\n\nYou can also add paths to a schema by using the chainable API\n```js\nuser\n  .path('username')\n  .type('string')\n  .required()\n  .match(/[a-z]{2,16}/)\n  .message('Username must be 2-16 chars.');\n\nuser\n  .path('address.zip')\n  .type('string')\n  .required()\n  .match(/[0-9]+/)\n  .message('Zip is required.');\n```\n\n## Typecasting\nValues can be automatically typecasted before validation.\nTo enable typecasting, pass an options object to the schema constructor with `typecast` set to `true`.\nYou can override this setting by passing options to ```.validate()```\n\n```js\nvar user = schema({\n  name: { type: 'string' },\n  age: { type: 'number' }\n}, { typecast: true });\n```\n\nTo override\n```js\nuser.validate(obj, { typecast: false });\n```\n\n## Property stripping\nBy default, all values not defined in the schema will be stripped from the object.\nSet `.strip = false` on the options object to disable this behavior.\n\n## API\n### schema(paths, [opts])\n\n  Creates a new `Schema` with the given paths.\n\n### Schema#path(path, [rules])\n\n  Add path to schema with optional rules. Returns a `Property`.\n\n### Schema#validate(obj, [opts])\n\n  Validate given object. Returns an array of errors.\n\n### Schema#assert(obj, [opts])\n\n  Validate given object and throw if the validation fails.\n\n### Property#use(fn, [msg])\n\n  Use the given validation function with and optional error message.\n  `fn` should accept a value and return `true` if the value is considered valid.\n\n### Property#type(name, [msg])\n\n  Property should be of type `name`.\n\n### Property#required(bool, [msg])\n\n  Property is required.\n\n### Property#match(regexp, [msg])\n\n  Proprety should match given `regexp`.\n\n### Property#each(fn, [msg])\n\n  Validate each value in array against given function `fn`.\n\n### Property#message(msg)\n\n  Set default error message for property.\n\n## Licence\nMIT\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/eivindfjeldstad/validate/issues"
  },
  "homepage": "https://github.com/eivindfjeldstad/validate#readme",
  "_id": "validate@3.0.1",
  "_from": "validate@>=3.0.1 <4.0.0"
}
